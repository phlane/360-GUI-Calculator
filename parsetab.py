
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLPARENRPARENrightMODrightEXPONENTleftPLUSMINUSleftTIMESDIVIDEDIVIDE EQUALS EXPONENT FLOAT INT LPAREN MINUS MOD NAME PLUS RPAREN TIMES\n    calc : expression\n        | setVariable\n        | empty\n    \n    setVariable : NAME EQUALS expression\n    \n    expression : expression TIMES expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n    \n    expression : expression MOD expression\n\n    \n    expression : expression EXPONENT expression\n\n    \n    expression : LPAREN expression RPAREN\n    \n    expression : INT\n    \n    expression : FLOAT\n    \n    expression : NAME\n    \n    empty :\n    '
    
_lr_action_items = {'LPAREN':([0,5,9,10,11,12,13,14,17,],[5,5,5,5,5,5,5,5,5,]),'INT':([0,5,9,10,11,12,13,14,17,],[6,6,6,6,6,6,6,6,6,]),'FLOAT':([0,5,9,10,11,12,13,14,17,],[7,7,7,7,7,7,7,7,7,]),'NAME':([0,5,9,10,11,12,13,14,17,],[8,16,16,16,16,16,16,16,16,]),'$end':([0,1,2,3,4,6,7,8,16,18,19,20,21,22,23,24,25,],[-15,0,-1,-2,-3,-12,-13,-14,-14,-5,-6,-7,-8,-9,-10,-11,-4,]),'TIMES':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[9,-12,-13,-14,9,-14,-5,-6,9,9,9,9,-11,9,]),'DIVIDE':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[10,-12,-13,-14,10,-14,-5,-6,10,10,10,10,-11,10,]),'PLUS':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[11,-12,-13,-14,11,-14,-5,-6,-7,-8,11,11,-11,11,]),'MINUS':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[12,-12,-13,-14,12,-14,-5,-6,-7,-8,12,12,-11,12,]),'MOD':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[13,-12,-13,-14,13,-14,-5,-6,-7,-8,13,-10,-11,13,]),'EXPONENT':([2,6,7,8,15,16,18,19,20,21,22,23,24,25,],[14,-12,-13,-14,14,-14,-5,-6,-7,-8,14,14,-11,14,]),'RPAREN':([6,7,15,16,18,19,20,21,22,23,24,],[-12,-13,24,-14,-5,-6,-7,-8,-9,-10,-11,]),'EQUALS':([8,],[17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,5,9,10,11,12,13,14,17,],[2,15,18,19,20,21,22,23,25,]),'setVariable':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','calcMain.py',65),
  ('calc -> setVariable','calc',1,'p_calc','calcMain.py',66),
  ('calc -> empty','calc',1,'p_calc','calcMain.py',67),
  ('setVariable -> NAME EQUALS expression','setVariable',3,'p_setVariable','calcMain.py',74),
  ('expression -> expression TIMES expression','expression',3,'p_recurse_expression','calcMain.py',80),
  ('expression -> expression DIVIDE expression','expression',3,'p_recurse_expression','calcMain.py',81),
  ('expression -> expression PLUS expression','expression',3,'p_recurse_expression','calcMain.py',82),
  ('expression -> expression MINUS expression','expression',3,'p_recurse_expression','calcMain.py',83),
  ('expression -> expression MOD expression','expression',3,'p_mod','calcMain.py',90),
  ('expression -> expression EXPONENT expression','expression',3,'p_exponent','calcMain.py',98),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paran','calcMain.py',106),
  ('expression -> INT','expression',1,'p_int_expression','calcMain.py',112),
  ('expression -> FLOAT','expression',1,'p_float_expression','calcMain.py',119),
  ('expression -> NAME','expression',1,'p_expression_variable','calcMain.py',126),
  ('empty -> <empty>','empty',0,'p_empty','calcMain.py',136),
]
